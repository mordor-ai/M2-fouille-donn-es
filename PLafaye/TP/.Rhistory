x <- 3L # crée la valeur 3, de type entier,
# ce qui est équivalent à:
x <- as.integer(3)
x <- 3L # crée la valeur 3, de type entier,
object.size(x)
# ce qui est équivalent à:
x <- as.integer(3)
object.size(x)
&x
setwd("~/Documents/M2-fouille-donn-es/PLafaye/TP")
WORKDIR.Data <- paste( WORKDIR,"/Data", sep = "")
setwd(WORKDIR.Data)
if (!"R.utils" %in% installed.packages()) install.packages("R.utils")
if (!file.exists("Data/emnist-digits-train-images-idx3-ubyte")) {
for (file in c("emnist-digits-train-images-idx3-ubyte",
"emnist-digits-train-labels-idx1-ubyte",
"emnist-digits-test-images-idx3-ubyte",
"emnist-digits-test-labels-idx1-ubyte")) {
R.utils::gunzip(paste("Data/", file, ".gz", sep = ""),
destname = paste("Data/", file, sep = ""))
}
}
if (!file.exists("Data/emnist-digits-train-images-idx3-ubyte")) {
for (file in c("emnist-digits-train-images-idx3-ubyte",
"emnist-digits-train-labels-idx1-ubyte",
"emnist-digits-test-images-idx3-ubyte",
"emnist-digits-test-labels-idx1-ubyte")) {
R.utils::gunzip(paste("Data/", file, ".gz", sep = ""),
destname = paste("Data/", file, sep = ""))
}
}
unlink("Data/gzip", recursive = TRUE) # Pour supprimer le dossier 'gzip'.
setwd(WORKDIR)
#Exercice: Utiliser vos connaissances de la première leçon et utiliser la fonction
#pour lire le magic number du fichier “emnist-digits-train-images-idx3-ubyte”.
WORKDIR <- "~/Documents/M2-fouille-donn-es/PLafaye/TP"
EMNIST.URL <- "http://www.itl.nist.gov/iaui/vip/cs_links/EMNIST/gzip.zip"
setwd(WORKDIR)
if (!"R.utils" %in% installed.packages()) install.packages("R.utils")
if (!file.exists("Data/emnist-digits-train-images-idx3-ubyte")) {
for (file in c("emnist-digits-train-images-idx3-ubyte",
"emnist-digits-train-labels-idx1-ubyte",
"emnist-digits-test-images-idx3-ubyte",
"emnist-digits-test-labels-idx1-ubyte")) {
R.utils::gunzip(paste("Data/", file, ".gz", sep = ""),
destname = paste("Data/", file, sep = ""))
}
}
if (!file.exists("Data/emnist-digits-train-images-idx3-ubyte")) {
for (file in c("emnist-digits-train-images-idx3-ubyte",
"emnist-digits-train-labels-idx1-ubyte",
"emnist-digits-test-images-idx3-ubyte",
"emnist-digits-test-labels-idx1-ubyte")) {
R.utils::gunzip(paste("Data/", file, ".gz", sep = ""),
destname = paste("Data/", file, sep = ""))
}
}
unlink("Data/gzip", recursive = TRUE) # Pour supprimer le dossier 'gzip'.
readBindata <-function(file, from,n){
as.numeric(paste("0x",paste(readBin(file,"raw",n=n)[from:n],collapse = ""),sep=""))
}
extract_images <- function(file, nbimages = NULL) {
if (is.null(nbimages)) { # On extrait toutes les images
nbimages <- readBindata(file, 5, 8)
}
nbrows <- readBindata(file, 9, 12)
nbcols <- readBindata(file, 13, 16)
raw <- readBin(file, "raw", n = nbimages * nbrows * nbcols + 16)[-(1:16)]
return(array(as.numeric(paste("0x", raw, sep="")), dim = c(nbcols, nbrows, nbimages)))
}
extract_labels <- function(file) {
nbitem <- readBindata(file, 5, 8)
raw <- readBin(file, "raw", n = nbitem + 8)[-(1:8)]
return(as.numeric(paste("0x", raw, sep="")))
}
nbimages_to_extract <- 10
images_training_set <- extract_images(file_training_set_image, nbimages_to_extract)
file_training_set_image <- "emnist-digits-train-images-idx3-ubyte"
file_training_set_label <- "emnist-digits-train-labels-idx1-ubyte"
file_test_set_image <- "emnist-digits-test-images-idx3-ubyte"
file_test_set_label <- "emnist-digits-test-labels-idx1-ubyte"
for (i in 1:nbimages_to_extract) {
img <- images_training_set[,,i]
image(t(img)[,nrow(img):1], col = gray((255:0)/256))
title(paste("Label:", labels_training_set[i]))
}
nbimages_to_extract <- 10
images_training_set <- extract_images(file_training_set_image, nbimages_to_extract)
images_test_set <- extract_images(file_test_set_image, nbimages_to_extract)
nbimages_to_extract <- 10
images_training_set <- extract_images(file_training_set_image, nbimages_to_extract)
WORKDIR.Data <- paste( WORKDIR,"/Data", sep = "")
setwd(WORKDIR.Data)
file_training_set_image <- "emnist-digits-train-images-idx3-ubyte"
file_training_set_label <- "emnist-digits-train-labels-idx1-ubyte"
file_test_set_image <- "emnist-digits-test-images-idx3-ubyte"
file_test_set_label <- "emnist-digits-test-labels-idx1-ubyte"
readBindata <-function(file, from,n){
as.numeric(paste("0x",paste(readBin(file,"raw",n=n)[from:n],collapse = ""),sep=""))
}
extract_images <- function(file, nbimages = NULL) {
if (is.null(nbimages)) { # On extrait toutes les images
nbimages <- readBindata(file, 5, 8)
}
nbrows <- readBindata(file, 9, 12)
nbcols <- readBindata(file, 13, 16)
raw <- readBin(file, "raw", n = nbimages * nbrows * nbcols + 16)[-(1:16)]
return(array(as.numeric(paste("0x", raw, sep="")), dim = c(nbcols, nbrows, nbimages)))
}
extract_labels <- function(file) {
nbitem <- readBindata(file, 5, 8)
raw <- readBin(file, "raw", n = nbitem + 8)[-(1:8)]
return(as.numeric(paste("0x", raw, sep="")))
}
nbimages_to_extract <- 10
images_training_set <- extract_images(file_training_set_image, nbimages_to_extract)
images_test_set <- extract_images(file_test_set_image, nbimages_to_extract)
labels_training_set <- extract_labels(file_training_set_label)
labels_test_set <- extract_labels(file_test_set_label)
par(ask = FALSE)
for (i in 1:nbimages_to_extract) {
img <- images_training_set[,,i]
image(t(img)[,nrow(img):1], col = gray((255:0)/256))
title(paste("Label:", labels_training_set[i]))
}
# Taille totale de toutes les images (en GB):
(as.numeric(object.size(images_training_set)) / 10) * 280000 / 1024 / 1024 / 1024
raw <- readBin(file_training_set_image, "raw")
raw
raw <- readBin(file_training_set_label, "raw")
raw
raw <- readBin(file_training_set_label, "raw", n=50)
raw
raw <- readBin(file_training_set_label, "raw", n=32)
raw
as.numeric(raw)
raw <- readBin(file_training_set_label, "raw", n=1)
as.numeric(raw)
raw <- readBin(file_training_set_label, "raw", n=1)
as.numeric(raw)
raw
raw <- readBin(file_training_set_label, 0,32)
raw
raw <- paste("0x",paste(readBin(file_training_set_image,"raw",n=4)[0:4],collapse = ""),sep="")
raw
as.numeric(raw)
#Exercice: Créer un code R permettant de lire le nombre d’images stockées dans le fichier“emnist-digits-train-images-idx3-ubyte”.
#position 5 à  8
raw <- paste("0x",paste(readBin(file_training_set_image,"raw",n=4)[5:8],collapse = ""),sep="")
raw
as.numeric(raw)
#Exercice: Créer un code R permettant de lire le nombre d’images stockées dans le fichier“emnist-digits-train-images-idx3-ubyte”.
#position 5 à  8
raw <- paste("0x",paste(readBin(file_training_set_image,"raw",n=8)[5:8],collapse = ""),sep="")
raw
as.numeric(raw)
install.packages("~/Documents/M2-visualisation-d-information/Arnaud Millet/Visu M2/VisuR_0.1.0.tar.gz", repos = NULL, type = "source")
setwd("~/Documents/M2-visualisation-d-information/Arnaud Millet/Visu M2")
#
#
#
# user system elapsed # 89.464 3.471 96.530 # dim(x)
system.time(x <- read.big.matrix("./Data/Netflix.txt", sep = ",", type = "integer",
backingfile = "Netflix.bin", descriptor = "Netflix.desc",
shared = TRUE, col.names = c("movie", "customer", "rating","year", "month")))
setwd("~/git/MIASHS/M2/M2-fouille-donn-es/PLafaye/TP")
#
#
#
# user system elapsed # 89.464 3.471 96.530 # dim(x)
system.time(x <- read.big.matrix("./Data/Netflix.txt", sep = ",", type = "integer",
backingfile = "Netflix.bin", descriptor = "Netflix.desc",
shared = TRUE, col.names = c("movie", "customer", "rating","year", "month")))
library(biganalytics)
library(biglm)
#
#
#
# user system elapsed # 89.464 3.471 96.530 # dim(x)
system.time(x <- read.big.matrix("./Data/Netflix.txt", sep = ",", type = "integer",
backingfile = "Netflix.bin", descriptor = "Netflix.desc",
shared = TRUE, col.names = c("movie", "customer", "rating","year", "month")))
library(biganalytics)
library(biganalytics)
install.packages("biganalytics")
library(biganalytics)
summary(x)
#
#
#
# user system elapsed # 89.464 3.471 96.530 # dim(x)
system.time(x <- read.big.matrix("./Data/Netflix.txt", sep = ",", type = "integer",
backingfile = "Netflix.bin", descriptor = "Netflix.desc",
shared = TRUE, col.names = c("movie", "customer", "rating","year", "month")))
dim(x)
range(x[,1])
install.packages("biganalytics")
install.packages("biganalytics")
library(biganalytics)
summary(x)
cust.indices <- mwhich(x, "customer", 2442, "eq")
head(x[cust.indices, ])
# • Des comparaisons plus complexes: par exemple, nous pourrions être intéressés au films du clien 2442’s qui ont été notés 2 ou pire entre février et octobre 2004:
these <- mwhich(x, c("customer", "year", "month", "rating"),
list(2442, 2004, c(2, 10), 2),
list("eq", "eq", c("ge", "le"),"le"), "AND")
x[these, ]
mnames <- read.csv("Data/movie_titles.csv", header = FALSE)
names(mnames) <- c("movie", "year", "Name of Movie")
mnames[mnames[, 1] %in% unique(x[these, 1]), c(1, 3)]
lm.0 <- biglm.big.matrix(rating ~ year, data = x, fc = "year")
print(summary(lm.0)$mat)
library(parallel)
cores <- detectCores() ## Combien de coeurs avons nous? print(cores)
## [1] 4
one.simu <- function(i) {
## tracer les données
n <- 1000; p <- 500
x <- matrix(rnorm(n*p),n,p) ; y <- rnorm(n) ## renvoie les coefficients ridge
train <- 1:floor(n/2)
test <- setdiff(1:n,train)
ridge <- lm.ridge(y~x+0,lambda=1,subset=train) err <- (y[test] - x[test, ] %*% ridge$coef )^2
return (list(err = mean(err), sd = sd(err)))
}
cores <- detectCores() ## Combien de coeurs avons nous? print(cores)
print(cores)
cpc <- function(X, Y, ng = 1) {
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk) chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk) chunk.Y <- readchunk(Y, g, size.chunk) term <- t(chunk.X) %*% chunk.Y
}
return(res)
}
set.seed(1)
cpc <- function(X, Y, ng = 1) {
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk) chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk) chunk.Y <- readchunk(Y, g, size.chunk) term <- t(chunk.X) %*% chunk.Y
}
return(res)
}
cpc <- function(X, Y, ng = 1){
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk) chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk) chunk.Y <- readchunk(Y, g, size.chunk) term <- t(chunk.X) %*% chunk.Y
}
return(res)
}
cpc <- function(X, Y, ng = 1){
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk) chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk)
chunk.Y <- readchunk(Y, g, size.chunk)
term <- t(chunk.X) %*% chunk.Y
}
return(res)
}
cpc <- function(X, Y, ng = 1){
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk)
chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk)
chunk.Y <- readchunk(Y, g, size.chunk)
term <- t(chunk.X) %*% chunk.Y
}
return(res)
}
set.seed(1)
n <- 10000
p <- 4
q <- 3
X <- matrix(rnorm(n*p),ncol=4,nrow=n)
Y <- matrix(rnorm(n*q),ncol=3,nrow=n)
res <- crossprod(X,Y) res
res <- crossprod(X,Y)
res
library(doSNOW)
cl <- makeCluster(4)
registerDoSNOW(cl)
res.cpc <- cpc(X,Y,ng=10)
stopCluster(cl)
res.cpc
install.packages("doSNOW")
library(doSNOW)
cl <- makeCluster(4)
registerDoSNOW(cl)
res.cpc <- cpc(X,Y,ng=10)
stopCluster(cl)
res.cpc
dataX <- read.big.matrix("./Data/MNIST10000.csv",descriptorfile = "MNIST.des",backingfile = "MNIST.bin",
header = TRUE, sep = ";", type = "integer")
Xdes <- describe(dataX)
Xdes
XtX.big <- function(X.des, ng = 1) {
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk) chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
require("bigmemory")
X <- attach.big.matrix(X.des) size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk)
chunk.Y <- readchunk(Y, g, size.chunk)
term <- t(chunk.X) %*% chunk.X }
return(res)
}
XtX.big <- function(X.des, ng = 1) {
readchunk <- function(X, g, size.chunk) {
rows <- ((g - 1) * size.chunk + 1):(g * size.chunk)
chunk <- X[rows,]
}
res <- foreach(g = 1:ng, .combine = "+") %dopar% {
require("bigmemory")
X <- attach.big.matrix(X.des)
size.chunk <- nrow(X) / ng
chunk.X <- readchunk(X, g, size.chunk)
term <- t(chunk.X) %*% chunk.X
}
return(res)
}
library(doSNOW)
cl <- makeCluster(4)
registerDoSNOW(cl)
cl <- makeCluster(4)
res.big <- XtX.big(Xdes,ng=10)
stopCluster(cl)
summary(res.big[,101])
head(res.big)
sample(1:10, 5)
set.seed(1)
sample(1:10, 5)
# Votre code ici utilisant write.table():
# I had to modify the dirname value in the file 'dataX.desc'
dataXdesc <- dget("./mybigfile.desc")
library(bigmemory)
dataXdesc <- dget("./mybigfile.desc")
system.time(dataX <- attach.big.matrix(dataXdesc)) ## user system elapsed
system.time(write.table(dataX, "./mybigfile2.csv", append = FALSE, sep = ",", dec = ".",
row.names = FALSE, col.names = FALSE))
library(bigmemory)
# Votre code ici:
system.time(X <- read.big.matrix("./mybigfile.csv",sep=",",backingfile ="mybigfile.bin",descriptor = "mybigfile.desc",type="double",shared=TRUE))
